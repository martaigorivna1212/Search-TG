import logging
import requests
from telegram import Update, ForceReply
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# Telegram Bot Token
TELEGRAM_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'

# Twitter API Bearer Token
TWITTER_BEARER_TOKEN = 'YOUR_TWITTER_BEARER_TOKEN'

# Set up logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Function to search Twitter
def search_twitter(query):
    url = "https://api.twitter.com/2/tweets/search/recent"
    headers = {
        "Authorization": f"Bearer {TWITTER_BEARER_TOKEN}"
    }
    params = {
        "query": query,
        "tweet.fields": "created_at,author_id",
        "max_results": 5
    }

    response = requests.get(url, headers=headers, params=params)

    if response.status_code == 200:
        tweets = response.json().get("data", [])
        return [f"{tweet['text']} (Author ID: {tweet['author_id']})" for tweet in tweets]
    else:
        logger.error(f"Twitter API error: {response.status_code} {response.text}")
        return ["Error fetching tweets"]

# Command handler for /start
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    update.message.reply_markdown_v2(
        fr"Hi {user.mention_markdown_v2()}\! Send me a keyword to search for tweets\.",
        reply_markup=ForceReply(selective=True),
    )

# Message handler for user queries
def handle_message(update: Update, context: CallbackContext) -> None:
    user_query = update.message.text
    update.message.reply_text("Searching Twitter for: " + user_query)

    tweets = search_twitter(user_query)
    for tweet in tweets:
        update.message.reply_text(tweet)

# Error handler
def error_handler(update: Update, context: CallbackContext) -> None:
    logger.warning(f"Update {update} caused error {context.error}")

# Main function to start the bot
def main() -> None:
    updater = Updater(TELEGRAM_TOKEN)

    dispatcher = updater.dispatcher

    # Register handlers
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dispatcher.add_error_handler(error_handler)

    # Start the bot
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
